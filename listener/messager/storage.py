from collections import deque
from typing import Deque, List, Optional, Callable, AsyncIterator, AsyncGenerator, Union
import asyncio
from telethon.tl.types import Message as TelethonMessage, PeerChannel
import logging
from telethon import TelegramClient, events
class MessageStorage:
    """–ü–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π Telethon.

    Args:
        max_size: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ö—Ä–∞–Ω–∏–º—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1000)
    """

    def __init__(self, client:TelegramClient, max_size: int = 1000):
        self._queue: Deque[TelethonMessage] = deque(maxlen=max_size)
        self._new_message_event = asyncio.Event()
        self._lock = asyncio.Lock()
        self._waiters = 0
        self.client = client

    async def add_message(self, message: TelethonMessage) -> None:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ.

        Args:
            message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è Telethon
        """
        if not isinstance(message, TelethonMessage):
            raise TypeError(f"Expected TelethonMessage, got {type(message)}")

        async with self._lock:
            self._queue.append(message)
            if self._waiters > 0:
                self._new_message_event.set()

    async def get_messages(self, count: int = 1) -> List[TelethonMessage]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —Å–æ–æ–±—â–µ–Ω–∏–π.

        Args:
            count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
        Returns:
            –°–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–æ—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º)
        """
        async with self._lock:
            return list(self._queue)[-count:]

    async def get_messages_filtered(
            self,
            filter_func: Callable[[TelethonMessage], bool],
            count: int = 1
    ) -> List[TelethonMessage]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.

        Args:
            filter_func: –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
            count: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
        Returns:
            –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π, —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è—é—â–∏—Ö —Ñ–∏–ª—å—Ç—Ä—É
        """
        async with self._lock:
            filtered = [msg for msg in self._queue if filter_func(msg)]
            return filtered[-count:]

    async def _process_media_group(self, first_msg: TelethonMessage, group_timeout: float) -> List[TelethonMessage]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—ã"""
        group_id = first_msg.grouped_id
        group = [first_msg]
        print(f"üì¶ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø–∞ (ID: {group_id})")

        start_time = asyncio.get_event_loop().time()
        while (asyncio.get_event_loop().time() - start_time) < group_timeout:
            try:
                remaining_time = group_timeout - (asyncio.get_event_loop().time() - start_time)
                await asyncio.wait_for(self._new_message_event.wait(), max(0.1, remaining_time))
            except asyncio.TimeoutError:
                break

            async with self._lock:
                for msg in list(self._queue):
                    if hasattr(msg, 'grouped_id') and msg.grouped_id == group_id:

                        group.append(msg)
                        self._queue.remove(msg)
                        print(f"   –î–æ–±–∞–≤–ª–µ–Ω —ç–ª–µ–º–µ–Ω—Ç {msg.id} –≤ –≥—Ä—É–ø–ø—É")

                if not self._queue:
                    self._new_message_event.clear()

        print(f"üì¶ –ì—Ä—É–ø–ø–∞ —Å–æ–±—Ä–∞–Ω–∞ ({len(group)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤)")
        return group

    async def wait_for_message(
            self,
            timeout: Optional[float] = None,
            group_timeout: float = 1.0
    ) -> Optional[Union[TelethonMessage, List[TelethonMessage]]]:
        async with self._lock:
            self._waiters += 1

        try:
            # –û–∂–∏–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                await asyncio.wait_for(self._new_message_event.wait(), timeout)
            except asyncio.TimeoutError:
                return None

            async with self._lock:
                if not self._queue:
                    self._new_message_event.clear()
                    return None

                first_msg = self._queue[-1]
                print(f"üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ ID {first_msg.id}")

                # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
                self._queue.remove(first_msg)

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
                if hasattr(first_msg, 'grouped_id') and first_msg.grouped_id:
                    return await self._process_media_group(first_msg, group_timeout)
                else:
                    return first_msg

        finally:
            async with self._lock:
                self._waiters -= 1
                if self._waiters == 0:
                    self._new_message_event.clear()


    async def clear(self) -> None:
        """–û—á–∏—â–∞–µ—Ç —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ–æ–±—â–µ–Ω–∏–π."""
        async with self._lock:
            self._queue.clear()
            self._new_message_event.clear()

    async def size(self) -> int:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ."""
        async with self._lock:
            return len(self._queue)

    async def messages_stream(self) -> AsyncGenerator[TelethonMessage, None]:
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –º–µ—Ä–µ –∏—Ö –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è.

        Yields:
            –û–±—ä–µ–∫—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–π Telethon –ø–æ –º–µ—Ä–µ –∏—Ö –ø–æ–ª—É—á–µ–Ω–∏—è
        """
        while True:
            msg = await self.wait_for_message()
            if msg is not None:
                yield msg

    async def get_all_messages(self) -> List[TelethonMessage]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ.

        Returns:
            –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–æ—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º)
        """
        async with self._lock:
            return list(self._queue)